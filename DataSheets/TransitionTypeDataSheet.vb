'*********************************************************************************************
' ST-Sim: A SyncroSim Module for the ST-Sim State-and-Transition Model.
'
' Copyright © 2007-2017 Apex Resource Management Solution Ltd. (ApexRMS). All rights reserved.
'
'*********************************************************************************************

Imports SyncroSim.Core
Imports System.Globalization
Imports System.Reflection

<ObfuscationAttribute(Exclude:=True, ApplyToMembers:=False)>
Class TransitionTypeDataSheet
    Inherits DataSheet

    Private m_TTData As DataTable
    Private m_TGDataSheet As DataSheet
    Private m_TGData As DataTable
    Private m_TTGDataSheet As DataSheet
    Private m_TTGData As DataTable
    Private m_PrevNames As New Dictionary(Of Integer, String)

    Protected Overrides Sub OnDataFeedsRefreshed()

        MyBase.OnDataFeedsRefreshed()

        Me.m_TTData = Me.GetData()

        Me.m_TGDataSheet = Me.Project.GetDataSheet(DATASHEET_TRANSITION_GROUP_NAME)
        Me.m_TGData = Me.m_TGDataSheet.GetData()

        Me.m_TTGDataSheet = Me.Project.GetDataSheet(DATASHEET_TRANSITION_TYPE_GROUP_NAME)
        Me.m_TTGData = Me.m_TTGDataSheet.GetData()

    End Sub

    Protected Overrides Sub OnRowsAdded(sender As Object, e As DataSheetRowEventArgs)

        Dim AutoGroups As New Dictionary(Of Integer, String)
        Dim AutoTypeGroups As New Dictionary(Of Integer, Integer)
        Dim IdColName As String = Me.PrimaryKeyColumn.Name

        Using store As DataStore = Me.Library.CreateDataStore()

            For Each dr As DataRow In Me.m_TTData.Rows

                If (dr.RowState <> DataRowState.Added) Then
                    Continue For
                End If

                Dim ThisId As Integer = CInt(dr(IdColName))
                Dim AutoGroupName As String = GetAutoGeneratedGroupName(dr)

                If (Me.m_TGDataSheet.ValidationTable.ContainsValue(AutoGroupName)) Then
                    Continue For
                End If

                Dim AutoGroupId As Integer = Library.GetNextSequenceId(store)

                AutoGroups.Add(AutoGroupId, AutoGroupName)
                AutoTypeGroups.Add(ThisId, AutoGroupId)

            Next

        End Using

        Debug.Assert(AutoTypeGroups.Count = AutoGroups.Count)

        If (AutoGroups.Count > 0) Then

            Me.m_TGDataSheet.BeginAddRows()
            Me.m_TTGDataSheet.BeginAddRows()

            For Each gid As Integer In AutoGroups.Keys
                Me.CreateTransitionGroup(gid, AutoGroups(gid))
            Next

            Using store As DataStore = Me.Library.CreateDataStore

                For Each tid As Integer In AutoTypeGroups.Keys
                    Me.CreateTransitionTypeGroup(tid, AutoTypeGroups(tid), store)
                Next

            End Using

            Me.m_TGDataSheet.EndAddRows()
            Me.m_TTGDataSheet.EndAddRows()

        End If

        MyBase.OnRowsAdded(sender, e)

    End Sub

    Public Overrides Sub DeleteRows(rows As IEnumerable(Of DataRow))

        Dim DeleteRows As New List(Of DataRow)
        Dim GroupRows As Dictionary(Of String, DataRow) = Me.CreateTGRowDictionary()

        For Each dr As DataRow In rows

            Dim AutoGroupName As String = GetAutoGeneratedGroupName(dr)

            If (Not GroupRows.ContainsKey(AutoGroupName)) Then
                Continue For
            End If

            Debug.Assert(DataTableUtilities.GetDataBool(GroupRows(AutoGroupName), IS_AUTO_COLUMN_NAME))
            DeleteRows.Add(GroupRows(AutoGroupName))

        Next

        If (DeleteRows.Count > 0) Then
            Me.m_TGDataSheet.DeleteRows(DeleteRows)
        End If

        MyBase.DeleteRows(rows)

    End Sub

    Protected Overrides Sub OnModifyingRows(sender As Object, e As DataSheetRowEventArgs)

        Me.m_PrevNames.Clear()

        Dim IdColName As String = Me.PrimaryKeyColumn.Name

        For Each dr As DataRow In Me.m_TTData.Rows

            If (dr.RowState = DataRowState.Deleted) Then
                Continue For
            End If

            Dim TypeId As Integer = CInt(dr(IdColName))
            Dim TypeName As String = CStr(dr(DATASHEET_NAME_COLUMN_NAME, DataRowVersion.Current))

            Me.m_PrevNames.Add(TypeId, TypeName)

        Next

        MyBase.OnModifyingRows(sender, e)

    End Sub

    Protected Overrides Sub OnRowsModified(sender As Object, e As DataSheetRowEventArgs)

        Dim ModifyRows As New List(Of DataRow)
        Dim IdColName As String = Me.PrimaryKeyColumn.Name
        Dim GroupRows As Dictionary(Of String, DataRow) = Me.CreateTGRowDictionary()
        Dim ExistingNames As New Dictionary(Of String, Boolean)

        For Each k As String In GroupRows.Keys
            ExistingNames.Add(k, True)
        Next

        For Each dr As DataRow In Me.m_TTData.Rows

            If (dr.RowState = DataRowState.Deleted) Then
                Continue For
            End If

            Dim id As Integer = CInt(dr(IdColName))

            If (Not Me.m_PrevNames.ContainsKey(id)) Then
                Continue For
            End If

            Dim OldName As String = Me.m_PrevNames(id)
            Dim OldAutoGroupName As String = GetAutoGeneratedGroupName(OldName)

            If (Not GroupRows.ContainsKey(OldAutoGroupName)) Then
                Continue For
            End If

            Dim NewName As String = CStr(dr(DATASHEET_NAME_COLUMN_NAME))

            Debug.Assert(DataTableUtilities.GetDataBool(GroupRows(OldAutoGroupName), IS_AUTO_COLUMN_NAME))

            If (OldName <> NewName) Then
                ModifyRows.Add(dr)
            End If

        Next

        If (ModifyRows.Count > 0) Then

            Me.m_TGDataSheet.BeginModifyRows()

            For Each dr As DataRow In ModifyRows

                Dim OldName As String = Me.m_PrevNames(CInt(dr(IdColName)))
                Dim NewName As String = CStr(dr(DATASHEET_NAME_COLUMN_NAME))

                Debug.Assert(OldName <> NewName)
                Debug.Assert(Not GroupRows.ContainsKey(GetAutoGeneratedGroupName(NewName)))

                Dim OldAutoGroupName As String = GetAutoGeneratedGroupName(OldName)
                Dim NewAutoGroupName As String = GetAutoGeneratedGroupName(NewName)

                GroupRows(OldAutoGroupName)(DATASHEET_NAME_COLUMN_NAME) = NewAutoGroupName

            Next

            Me.m_TGDataSheet.EndModifyRows()

        End If

        MyBase.OnRowsModified(sender, e)

    End Sub

    Private Function CreateTGRowDictionary() As Dictionary(Of String, DataRow)

        Dim d As New Dictionary(Of String, DataRow)

        For Each dr As DataRow In Me.m_TGData.Rows

            If (dr.RowState <> DataRowState.Deleted) Then
                d.Add(CStr(dr(DATASHEET_NAME_COLUMN_NAME)), dr)
            End If

        Next

        Return d

    End Function

    Private Sub CreateTransitionGroup(ByVal id As Integer, ByVal name As String)

        Dim dr As DataRow = Me.m_TGData.NewRow

        dr(Me.m_TGDataSheet.PrimaryKeyColumn.Name) = id
        dr(DATASHEET_NAME_COLUMN_NAME) = name
        dr(IS_AUTO_COLUMN_NAME) = CInt(True)

        Me.m_TGData.Rows.Add(dr)

    End Sub

    Private Sub CreateTransitionTypeGroup(ByVal typeId As Integer, ByVal groupId As Integer, ByVal store As DataStore)

        Dim dr As DataRow = Me.m_TTGData.NewRow
        Dim id As Integer = Library.GetNextSequenceId(store)

        dr(Me.m_TTGDataSheet.PrimaryKeyColumn.Name) = id
        dr(DATASHEET_TRANSITION_TYPE_ID_COLUMN_NAME) = typeId
        dr(DATASHEET_TRANSITION_GROUP_ID_COLUMN_NAME) = groupId
        dr(IS_AUTO_COLUMN_NAME) = CInt(True)

        Me.m_TTGData.Rows.Add(dr)

    End Sub

    Private Shared Function GetAutoGeneratedGroupName(ByVal dr As DataRow) As String
        Return GetAutoGeneratedGroupName(CStr(dr(DATASHEET_NAME_COLUMN_NAME)))
    End Function

    Private Shared Function GetAutoGeneratedGroupName(ByVal typeName As String) As String
        Return String.Format(CultureInfo.InvariantCulture, "{0} {1}", typeName, AUTO_COLUMN_SUFFIX)
    End Function

End Class
